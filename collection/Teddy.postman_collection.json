{
	"info": {
		"_postman_id": "b7a264f3-96a4-4d60-88d5-fcf26e387c48",
		"name": "Teddy",
		"description": "The Teddy Open Finance Challenge is a backend application that provides a URL shortening service. The service accepts a URL as input and returns a shortened URL as output. The shortened URL is a sequence of alphanumeric characters that is easy to remember and share.\n\nThe service works as follows:\n\n1. The user sends a URL to the service.\n2. The service generates a random shortened URL.\n3. The service stores the shortened URL and the original URL in a database.\n4. The service returns the shortened URL to the user.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20771026"
	},
	"item": [
		{
			"name": "Manual",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const statusCode = 201;\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is \" + statusCode, function () {\r",
											"  pm.response.to.have.status(statusCode);\r",
											"\r",
											"  // Access the token directly from the response:\r",
											"  pm.environment.set(\"token\", response.access_token);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"brunao@email.com\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "findAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const statusCode = 200;",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Status code is \" + statusCode, function () {",
											"    pm.response.to.have.status(statusCode);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "findById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"bruno@email.com\",\n    \"password\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"bruno12334@email.com\",\n    \"password\": \"12342343548\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										""
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "Shortened Urls",
					"item": [
						{
							"name": "FindByUser",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/user-urls/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user-urls",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"originalUrl\": \"www.google.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}",
									"host": [
										"{{base_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const statusCode = 200;\r",
											"const response = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is \" + statusCode, function () {\r",
											"    pm.response.to.have.status(statusCode);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate backend response\", function () {\r",
											"    pm.expect(response.email).to.eql(requestBody.email);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\",\r",
											"    },\r",
											"    \"originalUrl\": {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"shortUrl\": {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"clickCount\": {\r",
											"      \"type\": \"integer\",\r",
											"    },\r",
											"    \"active\": {\r",
											"      \"type\": \"boolean\",\r",
											"    },\r",
											"    \"createdAt\": {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"    \"updatedAt\": {\r",
											"      \"type\": \"string\",\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\"id\", \"originalUrl\", \"shortUrl\", \"clickCount\", \"userId\", \"active\"],\r",
											"}\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"originalUrl\": \"www.googleefffffffx.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Automatic",
			"item": [
				{
					"name": "createUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201;",
									"const response = pm.response.json();",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code is \" + statusCode, function () {",
									"    pm.response.to.have.status(statusCode);",
									"    pm.environment.set(\"userId\", response.id);",
									"});",
									"",
									"pm.test(\"Validate backend response\", function () {",
									"    pm.expect(response.email).to.eql(requestBody.email);",
									"});",
									"",
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"active\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"email\",",
									"    \"id\",",
									"    \"active\"",
									"  ]",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let emailRandom = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"pm.environment.set(\"email\", 'teste_' + emailRandom + '@email.com');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201;\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"  pm.response.to.have.status(statusCode);\r",
									"\r",
									"  // Access the token directly from the response:\r",
									"  pm.environment.set(\"token\", response.access_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "findAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200;",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code is \" + statusCode, function () {",
									"    pm.response.to.have.status(statusCode);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "findUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200;\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate backend response\", function () {\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"active\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"email\",\r",
									"    \"active\",\r",
									"    \"createdAt\",\r",
									"    \"updatedAt\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200;",
									"const response = pm.response.json();",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code is \" + statusCode, function () {",
									"    pm.response.to.have.status(statusCode);",
									"});",
									"",
									"pm.test(\"Validate backend response\", function () {",
									"    pm.expect(response.email).to.eql(requestBody.email);",
									"});",
									"",
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"active\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"createdAt\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"updatedAt\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"email\",",
									"    \"active\",",
									"    \"createdAt\",",
									"    \"updatedAt\"",
									"  ]",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let emailRandom = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"pm.environment.set(\"email\", 'teste_update_' + emailRandom + '@email.com');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "createUrl",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let urlRandom = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"pm.environment.set(\"url\", 'www.' + urlRandom + '.com');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201;\r",
									"const response = pm.response.json();\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"    const lastSixChars = response.shortUrl.slice(-6);\r",
									"    pm.environment.set(\"shortUrl\", lastSixChars);\r",
									"    pm.environment.set(\"shortUrlId\", response.id);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"shortUrl\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"originalUrl\": \"{{url}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200;\r",
									"const response = pm.response.json();\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate backend response\", function () {\r",
									"    pm.expect(response.originalUrl).to.eql(requestBody.originalUrl);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\",\r",
									"    },\r",
									"    \"originalUrl\": {\r",
									"      \"type\": \"string\",\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\",\r",
									"    },\r",
									"    \"clickCount\": {\r",
									"      \"type\": \"integer\",\r",
									"    },\r",
									"    \"active\": {\r",
									"      \"type\": \"boolean\",\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\",\r",
									"    },\r",
									"    \"updatedAt\": {\r",
									"      \"type\": \"string\",\r",
									"    },\r",
									"  },\r",
									"  \"required\": [\"id\", \"originalUrl\", \"shortUrl\", \"clickCount\", \"userId\", \"active\"],\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let urlRandom = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"pm.environment.set(\"url\", 'www.' + urlRandom + '.com');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"originalUrl\": \"{{url}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{shortUrlId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{shortUrlId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200;\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"url\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{shortUrl}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{shortUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindUrlsByUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200;\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user-urls/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-urls",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 204;\r",
									"\r",
									"pm.test(\"Status code is \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{shortUrlId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{shortUrlId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJydW5vQGVtYWlsLmNvbSIsImlkIjozLCJpYXQiOjE3MDU3MTQ5MTAsImV4cCI6MTcwNTcxNjExMH0.PIxf3lur7nvI5z1yy-buHuOB8-c9A345y00spSf0gXM",
			"type": "string"
		}
	]
}